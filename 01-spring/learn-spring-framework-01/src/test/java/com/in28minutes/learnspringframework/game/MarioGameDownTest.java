// ********RoostGPT********
/*
Test generated by RoostGPT for test java-spring using AI Type Azure Open AI and AI Model trynow
ROOST_METHOD_HASH=down_ac78e08b44
ROOST_METHOD_SIG_HASH=down_ce4bc4253b
Scenario 1: Testing down method
Details:
  TestName: testDown
  Description: This test is meant to check the functionality of the down method when it is invoked.
Execution:
  Arrange: No setup required.
  Act: Invoke down method.
  Assert: No assertions required.
Validation: The down method is expected to print "Go into a hole" to the console.
Scenario 2: Testing down method with mocked System.out
Details:
  TestName: testDownWithMockedSystemOut
  Description: This test is meant to check if the down method prints the expected output to System.out.
Execution:
  Arrange: Mock the System.out object.
  Act: Invoke down method.
  Assert: Verify that the mocked System.out receives the expected output.
Validation: This test validates that the down method uses System.out correctly to print the expected output.
Scenario 3: Testing down method with null System.out
Details:
  TestName: testDownWithNullSystemOut
  Description: This test is meant to check if the down method throws an exception when System.out is null.
Execution:
  Arrange: Set System.out to null.
  Act: Invoke down method.
  Assert: Verify that an exception is thrown.
Validation: This test ensures that the down method throws an exception when System.out is null.
Scenario 4: Testing down method with a redirected System.out
Details:
  TestName: testDownWithRedirectedSystemOut
  Description: This test is meant to check if the down method prints the expected output when System.out is redirected to a different output stream.
Execution:
  Arrange: Redirect System.out to a different output stream.
  Act: Invoke down method.
  Assert: Verify that the redirected output stream receives the expected output.
Validation: This test verifies that the down method correctly uses the specified output stream to print the expected output.
*/
// ********RoostGPT********
package com.in28minutes.learnspringframework.game;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

@Tag("com.in28minutes.learnspringframework.game")
@Tag("com.in28minutes.learnspringframework.game.down")
class MarioGameDownTest {

	private final PrintStream originalSystemOut = System.out;

	private ByteArrayOutputStream outputStream;

	private PrintStream printStream;

	@BeforeEach
	void setUp() {
		outputStream = new ByteArrayOutputStream();
		printStream = new PrintStream(outputStream);
		System.setOut(printStream);
	}

	@AfterEach
	void tearDown() {
		System.setOut(originalSystemOut);
		printStream.close();
	}

	@Test
	void testDown() {
		MarioGame marioGame = Mockito.spy(MarioGame.class);
		marioGame.down();
		assertEquals("Go into a hole\n", outputStream.toString());
	}

	@Test
	void testDownWithMockedSystemOut() {
		MarioGame marioGame = Mockito.spy(MarioGame.class);
		marioGame.down();
		Mockito.verify(marioGame).down();
		Mockito.verifyNoMoreInteractions(marioGame);
	}

	@Test
	void testDownWithNullSystemOut() {
		System.setOut(null);
		MarioGame marioGame = new MarioGame();
		assertThrows(NullPointerException.class, marioGame::down);
	}

	@Test
	void testDownWithRedirectedSystemOut() {
		MarioGame marioGame = Mockito.spy(MarioGame.class);
		System.setOut(originalSystemOut);
		PrintStream redirectedSystemOut = Mockito.spy(printStream);
		marioGame.down();
		assertEquals("Go into a hole\n", outputStream.toString());
	}

}